// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	http "net/http"
	applicationparameter "user-domain/internal/application/controller/parameter"

	mock "github.com/stretchr/testify/mock"
)

// UserApi is an autogenerated mock type for the UserApi type
type UserApi struct {
	mock.Mock
}

// DeleteUsersUserId provides a mock function with given fields: w, r, userId
func (_m *UserApi) DeleteUsersUserId(w http.ResponseWriter, r *http.Request, userId string) {
	_m.Called(w, r, userId)
}

// GetUsers provides a mock function with given fields: w, r, paramObj
func (_m *UserApi) GetUsers(w http.ResponseWriter, r *http.Request, paramObj applicationparameter.UserQueryParams) {
	_m.Called(w, r, paramObj)
}

// GetUsersUserId provides a mock function with given fields: w, r, userID
func (_m *UserApi) GetUsersUserId(w http.ResponseWriter, r *http.Request, userID string) {
	_m.Called(w, r, userID)
}

// PostUsers provides a mock function with given fields: w, r
func (_m *UserApi) PostUsers(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// PutUsersUserId provides a mock function with given fields: w, r, userID
func (_m *UserApi) PutUsersUserId(w http.ResponseWriter, r *http.Request, userID string) {
	_m.Called(w, r, userID)
}

// NewUserApi creates a new instance of UserApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserApi {
	mock := &UserApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
